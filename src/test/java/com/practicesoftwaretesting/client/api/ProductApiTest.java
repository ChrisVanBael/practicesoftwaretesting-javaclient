/*
 * Toolshop API
 * Toolshop REST API technical description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@testsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.practicesoftwaretesting.client.api;

import com.practicesoftwaretesting.client.model.BrandResponse;
import com.practicesoftwaretesting.client.model.InlineResponse200;
import com.practicesoftwaretesting.client.model.InlineResponse2005;
import com.practicesoftwaretesting.client.model.InlineResponse201;
import com.practicesoftwaretesting.client.model.InlineResponse401;
import com.practicesoftwaretesting.client.model.InlineResponse404;
import com.practicesoftwaretesting.client.model.InlineResponse4041;
import com.practicesoftwaretesting.client.model.InlineResponse405;
import com.practicesoftwaretesting.client.model.ProductRequest;
import com.practicesoftwaretesting.client.model.ProductResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ProductApi
 */
@Ignore
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Delete specific product
     *
     * Admin role is required to delete a specific product
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProductTest() throws Exception {
        Integer productId = null;
        api.deleteProduct(productId);

        // TODO: test validations
    }
    /**
     * Retrieve specific product
     *
     * Retrieve specific product
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProductTest() throws Exception {
        Integer productId = null;
        BrandResponse response = api.getProduct(productId);

        // TODO: test validations
    }
    /**
     * Retrieve all products
     *
     * Retrieve all products
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws Exception {
        Integer byBrand = null;
        Integer byCategory = null;
        String isRental = null;
        String between = null;
        String sort = null;
        InlineResponse2005 response = api.getProducts(byBrand, byCategory, isRental, between, sort);

        // TODO: test validations
    }
    /**
     * Retrieve related products
     *
     * Retrieve related products
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRelatedProductsTest() throws Exception {
        Integer productId = null;
        List<ProductResponse> response = api.getRelatedProducts(productId);

        // TODO: test validations
    }
    /**
     * Retrieve specific products matching the search query
     *
     * Search is performed on the &#x60;name&#x60; column
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchProductTest() throws Exception {
        String q = null;
        InlineResponse2005 response = api.searchProduct(q);

        // TODO: test validations
    }
    /**
     * Store new product
     *
     * Store new product
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void storeProductTest() throws Exception {
        ProductRequest body = null;
        InlineResponse201 response = api.storeProduct(body);

        // TODO: test validations
    }
    /**
     * Update specific product
     *
     * Update specific product
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProductTest() throws Exception {
        ProductRequest body = null;
        Integer productId = null;
        InlineResponse200 response = api.updateProduct(body, productId);

        // TODO: test validations
    }
}
