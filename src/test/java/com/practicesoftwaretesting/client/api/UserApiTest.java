/*
 * Toolshop API
 * Toolshop REST API technical description
 *
 * OpenAPI spec version: 0.4.0
 * Contact: info@testsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.practicesoftwaretesting.client.api;

import com.practicesoftwaretesting.client.model.InlineResponse200;
import com.practicesoftwaretesting.client.model.InlineResponse2006;
import com.practicesoftwaretesting.client.model.InlineResponse2007;
import com.practicesoftwaretesting.client.model.InlineResponse401;
import com.practicesoftwaretesting.client.model.InlineResponse404;
import com.practicesoftwaretesting.client.model.UserRequest;
import com.practicesoftwaretesting.client.model.UserResponse;
import com.practicesoftwaretesting.client.model.UsersChangepasswordBody;
import com.practicesoftwaretesting.client.model.UsersForgotpasswordBody;
import com.practicesoftwaretesting.client.model.UsersLoginBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Change password
     *
     * Change the existing password to a new one
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws Exception {
        UsersChangepasswordBody body = null;
        InlineResponse200 response = api.changePassword(body);

        // TODO: test validations
    }
    /**
     * Delete specific user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws Exception {
        Integer userId = null;
        api.deleteUser(userId);

        // TODO: test validations
    }
    /**
     * Request a new password
     *
     * Request a new password, it actually sets the password to &#x60;welcome01&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws Exception {
        UsersForgotpasswordBody body = null;
        InlineResponse200 response = api.forgotPassword(body);

        // TODO: test validations
    }
    /**
     * Retrieve current customer info
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentCustomerInfoTest() throws Exception {
        UserResponse response = api.getCurrentCustomerInfo();

        // TODO: test validations
    }
    /**
     * Retrieve specific user
     *
     * Retrieve specific user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws Exception {
        Integer userId = null;
        UserResponse response = api.getUser(userId);

        // TODO: test validations
    }
    /**
     * Retrieve all users
     *
     * Retrieve all users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws Exception {
        List<UserResponse> response = api.getUsers();

        // TODO: test validations
    }
    /**
     * Logout - invalidate the token
     *
     * Logout - invalidate the token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logOutTest() throws Exception {
        InlineResponse2007 response = api.logOut();

        // TODO: test validations
    }
    /**
     * Login customer
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void loginCustomerTest() throws Exception {
        UsersLoginBody body = null;
        InlineResponse2006 response = api.loginCustomer(body);

        // TODO: test validations
    }
    /**
     * Retrieve a refreshed token
     *
     * Retrieve a refreshed token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws Exception {
        InlineResponse2006 response = api.refreshToken();

        // TODO: test validations
    }
    /**
     * Retrieve specific users matching the search query
     *
     * Search is performed on the &#x60;first_name&#x60;, &#x60;last_name&#x60;, or &#x60;city&#x60; column
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchUserTest() throws Exception {
        String q = null;
        List<UserResponse> response = api.searchUser(q);

        // TODO: test validations
    }
    /**
     * Store new user
     *
     * Store new user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void storeUserTest() throws Exception {
        UserRequest body = null;
        UserResponse response = api.storeUser(body);

        // TODO: test validations
    }
    /**
     * Update specific user
     *
     * Update specific user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws Exception {
        UserRequest body = null;
        Integer userId = null;
        InlineResponse200 response = api.updateUser(body, userId);

        // TODO: test validations
    }
}
